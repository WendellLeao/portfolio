{"version":3,"file":"static/js/336.3329236f.chunk.js","mappings":"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","sources":["components/GameVideo.tsx","components/GameButtonDisabled.tsx","components/GameButton.tsx","components/GameDescription.tsx","components/GameSideMenu.tsx","components/GameItem.tsx","components/Utils.tsx","components/Reveal.tsx"],"sourcesContent":["import ReactPlayer from \"react-player\";\r\nimport './GameVideo.css';\r\n\r\ninterface Props {\r\n    videoUrl: string;\r\n    onStart: () => void;\r\n}\r\n\r\nconst GameVideo = ({ videoUrl, onStart }: Props) => {\r\n    return (\r\n        <ReactPlayer\r\n            className=\"reactPlayer\"\r\n            url={videoUrl}\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            playing={true}\r\n            muted={true}\r\n            loop={true}\r\n            controls={false}\r\n            onStart={onStart}\r\n        />\r\n    )\r\n}\r\n\r\nexport default GameVideo;","import {useTranslation} from 'react-i18next';\r\nimport './GameButtonDisabled.css';\r\n\r\nconst GameButtonDisabled = () => {\r\n    const { t, i18n } = useTranslation();\r\n\r\n    return (\r\n        <div className=\"disabledButtonContainer\">\r\n            <button type=\"submit\" disabled>\r\n                {t(\"disabledGameButton\")}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameButtonDisabled;","import GameButtonDisabled from './GameButtonDisabled';\r\nimport itchImage from '../images/itchio.png';\r\nimport steamImage from '../images/steam.png';\r\nimport './GameButton.css';\r\n\r\ninterface Props{\r\n    store: string;\r\n    url: string;\r\n}\r\n\r\nconst GameButton = ({store, url}: Props) => {\r\n    function GetGameButton() : JSX.Element {\r\n        if(url !== \"\"){\r\n            return (\r\n                <div className=\"buttonContainer\">\r\n                    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        <img className={GetStoreImgClass(store)} src={GetStoreImage(store)} alt=\"store icon\"></img>\r\n                    </a>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return <GameButtonDisabled />\r\n    }\r\n    \r\n    function GetStoreImgClass(store: string) : string {\r\n        return store === \"itch\" ? \"itchLogo\" : \"steamLogo\";\r\n    }\r\n\r\n    function GetStoreImage(store: string) : string {\r\n        return store === \"itch\" ? itchImage : steamImage;\r\n    }\r\n    \r\n    return (\r\n        <div>{GetGameButton()}</div>\r\n    )\r\n}\r\n\r\nexport default GameButton;","import React from \"react\";\r\nimport GameButton from './GameButton';\r\nimport {useTranslation} from 'react-i18next';\r\nimport {Reveal} from \"./Reveal\";\r\nimport closeImage from '../images/close-image.png';\r\nimport './GameDescription.css';\r\n\r\ninterface Props {\r\n    name: string;\r\n    synopses: string;\r\n    description: string;\r\n    store: string;\r\n    url: string;\r\n    onCloseButtonClick: () => void;\r\n}\r\n\r\nconst GameDescription = ({name, synopses, description, store, url, onCloseButtonClick} : Props) => {\r\n    const { t, i18n } = useTranslation();\r\n    \r\n    const delay : number = 0.2;\r\n    \r\n    return (\r\n        <Reveal delay={delay}>\r\n            <div className=\"gameDescriptionContainer\">\r\n                <Reveal delay={delay}>\r\n                    <h1>\r\n                        {name}\r\n                        <div className=\"gameDescriptionLine\"></div>\r\n                    </h1>\r\n                </Reveal>\r\n                <Reveal delay={delay}>\r\n                    <em>\r\n                        <p className=\"synopses\">\r\n                            {t(synopses)}\r\n                        </p>\r\n                    </em>\r\n                </Reveal>\r\n                <Reveal delay={delay}>\r\n                    <p className=\"description\">\r\n                        {t(description)}\r\n                    </p>\r\n                </Reveal>\r\n                <Reveal delay={delay}>\r\n                    <GameButton store={store} url={url} />\r\n                </Reveal>\r\n                <a className=\"closeButton\" onClick={onCloseButtonClick}>\r\n                    <img src={closeImage} alt=\"close image\"/>\r\n                </a>\r\n            </div>\r\n        </Reveal>\r\n    )\r\n}\r\n\r\nexport default GameDescription;","import infoIcon from '../images/info-icon.png';\r\nimport './GameSideMenu.css';\r\n\r\ninterface Props {\r\n    title: string;\r\n    onInfoClick: () => void;\r\n}\r\n\r\nconst GameSideMenu = ({ title, onInfoClick }: Props) => {\r\n    return (\r\n        <div className=\"gameSideMenuContainer\">\r\n            <h1>\r\n                {title}\r\n            </h1>\r\n            <a onClick={onInfoClick} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <img src={infoIcon} alt=\"information icon\"></img>\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameSideMenu;","import React, {RefObject, useEffect, useRef, useState} from 'react';\r\nimport GameVideo from './GameVideo';\r\nimport GameDescription from './GameDescription';\r\nimport GameSideMenu from './GameSideMenu';\r\nimport useOnScreen from \"./Utils\";\r\nimport './GameItem.css';\r\nimport {motion, useInView, useAnimation, AnimationControls} from \"framer-motion\";\r\n\r\ninterface Props {\r\n    id: string;\r\n    title: string;\r\n    synopses: string;\r\n    description: string;\r\n    store: \"steam\" | \"itch\";\r\n    url?: string;\r\n    videoUrl: string;\r\n    imageUrl: string;\r\n    gifUrl: string;\r\n    side: \"right\" | \"left\";\r\n    shadow?: \"top\" | \"bottom\"\r\n}\r\n\r\nconst GameItem = ({id, title, synopses, description, store = \"itch\", url = \"\", videoUrl, gifUrl, imageUrl, side, shadow}: Props) => {\r\n    const [videoHasStarted, SetVideoHasStarted] = useState(false);\r\n    \r\n    const mediaRef : RefObject<HTMLDivElement> = useRef<HTMLDivElement>(null)\r\n    const gameImageRef : RefObject<HTMLImageElement> = useRef<HTMLImageElement>(null)\r\n\r\n    const mediaIsVisible : boolean = useOnScreen(mediaRef)\r\n    \r\n    const gameDescriptionRef : RefObject<HTMLDivElement> = useRef<HTMLDivElement>(null); \r\n    const gameSideMenuRef : RefObject<HTMLDivElement> = useRef<HTMLDivElement>(null);\r\n\r\n    const mediaQueryList : MediaQueryList = window.matchMedia(\"(min-width: 45em)\");\r\n\r\n    mediaQueryList.addEventListener(\"change\", function() : void {\r\n        if (mediaQueryList.matches) {\r\n            ShowGameDescription();\r\n        }\r\n        else {\r\n            ShowGameSideMenu();\r\n        }\r\n    });\r\n    \r\n    function ShowGameDescription() : void {\r\n        SetDisplay(gameDescriptionRef.current, \"flex\")\r\n        SetDisplay(gameSideMenuRef.current, \"none\")\r\n    }\r\n    \r\n    function ShowGameSideMenu() : void {\r\n        SetDisplay(gameSideMenuRef.current, \"flex\")\r\n        SetDisplay(gameDescriptionRef.current, \"none\")\r\n    }\r\n\r\n    function GetVideoElement() : JSX.Element {\r\n        const imageElement : JSX.Element = <img ref={gameImageRef} src={imageUrl} alt=\"game image\" />;\r\n        \r\n        if (!mediaQueryList.matches) {\r\n            return <></>\r\n        }\r\n\r\n        SetDisplay(gameImageRef.current, !videoHasStarted ? \"flex\" : \"none\")\r\n        \r\n        if (mediaIsVisible || videoHasStarted) {\r\n            return (\r\n                <div className=\"videoContainer\">\r\n                    {imageElement}\r\n                    <GameVideo videoUrl={videoUrl} onStart={() => SetVideoHasStarted(true)} />\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return imageElement;\r\n    }\r\n\r\n    function GetClassName() : string {\r\n        let className : string = \"gamesItem \" + id + \" \";\r\n\r\n        if (shadow) {\r\n            className += shadow + \"Shadow\";\r\n        }\r\n\r\n        return className;\r\n    }\r\n    \r\n    function SetDisplay(current : HTMLDivElement | null, display : string) : void {\r\n        if (current) {\r\n            current.style.display = display;\r\n        }\r\n    }\r\n\r\n\r\n    const ref : React.MutableRefObject<null> = useRef(null);\r\n    const isInView : boolean = useInView(ref, { once: true });\r\n\r\n    const mainControls : AnimationControls = useAnimation();\r\n\r\n    useEffect(() : void => {\r\n        if (isInView) {\r\n            mainControls.start(\"visible\");\r\n        }\r\n    }, [isInView])\r\n    \r\n    return (\r\n        <motion.div \r\n            ref={ref}\r\n            className={GetClassName()}\r\n            variants={{\r\n                hidden: { opacity: 0, scale: 0.8 },\r\n                visible: { opacity: 1, scale: 1 },\r\n            }}\r\n            initial=\"hidden\"\r\n            animate={mainControls}\r\n            transition={{ duration: 0.9, delay: 0 }}>\r\n            <div ref={mediaRef} className=\"mediaContainer\">\r\n                <img className=\"gameGif\" src={gifUrl} alt=\"game gif\" />\r\n                {GetVideoElement()}\r\n            </div>\r\n            <div ref={gameDescriptionRef} id=\"gameDescription\" className={side}>\r\n                <GameDescription name={title}\r\n                                 synopses={synopses}\r\n                                 description={description}\r\n                                 store={store}\r\n                                 url={url}\r\n                                 onCloseButtonClick={ShowGameSideMenu}/>\r\n            </div>\r\n            <div ref={gameSideMenuRef} id=\"gameSideMenu\" className={side}>\r\n                <GameSideMenu title={title} onInfoClick={ShowGameDescription} />\r\n            </div>\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default GameItem;","import {RefObject, useEffect, useMemo, useState} from \"react\";\r\n\r\nexport default function useOnScreen(ref: RefObject<HTMLElement>) : boolean {\r\n    const [isIntersecting, setIntersecting] = useState(false)\r\n\r\n    const observer = useMemo(() => new IntersectionObserver(\r\n        ([entry]) => setIntersecting(entry.isIntersecting)\r\n    ), [ref])\r\n\r\n\r\n    useEffect(() => {\r\n        if (ref.current) {\r\n            observer.observe(ref.current)\r\n            return () => observer.disconnect()\r\n        }\r\n        else {\r\n            console.log(\"Ref current is null!\")\r\n        }\r\n    }, [])\r\n\r\n    return isIntersecting\r\n}","import {motion, useInView, useAnimation, AnimationControls} from \"framer-motion\";\r\nimport React, { useEffect, useRef } from \"react\";\r\n\r\ninterface Props {\r\n    children: JSX.Element;\r\n    delay?: number;\r\n}\r\n\r\nexport const Reveal = ({ children, delay }: Props ) => {\r\n    const ref : React.MutableRefObject<null> = useRef(null);\r\n    const isInView : boolean = useInView(ref, { once: true });\r\n\r\n    const mainControls : AnimationControls = useAnimation();\r\n\r\n    useEffect(() : void => {\r\n        if (isInView) {\r\n            mainControls.start(\"visible\");\r\n        }\r\n    }, [isInView])\r\n\r\n    return (\r\n        <motion.div\r\n            ref={ref}\r\n            variants={{\r\n                hidden: { opacity: 0, y: 75 },\r\n                visible: { opacity: 1, y: 0 },\r\n            }}\r\n            initial=\"hidden\"\r\n            animate={mainControls}\r\n            transition={{ duration: 0.7, delay: delay }}>\r\n            {children}\r\n        </motion.div>\r\n    )\r\n}"],"names":["GameVideo","videoUrl","onStart","_jsx","ReactPlayer","className","url","width","height","playing","muted","loop","controls","GameButtonDisabled","t","i18n","useTranslation","children","type","disabled","GameButton","store","GetStoreImgClass","GetStoreImage","itchImage","steamImage","href","target","rel","src","alt","GameDescription","name","synopses","description","onCloseButtonClick","delay","Reveal","_jsxs","onClick","GameSideMenu","title","onInfoClick","GameItem","id","gifUrl","imageUrl","side","shadow","videoHasStarted","SetVideoHasStarted","useState","mediaRef","useRef","gameImageRef","mediaIsVisible","ref","isIntersecting","setIntersecting","observer","useMemo","IntersectionObserver","entry","useEffect","current","observe","disconnect","console","log","useOnScreen","gameDescriptionRef","gameSideMenuRef","mediaQueryList","window","matchMedia","ShowGameDescription","SetDisplay","ShowGameSideMenu","display","style","addEventListener","matches","isInView","useInView","once","mainControls","useAnimation","start","motion","div","GetClassName","variants","hidden","opacity","scale","visible","initial","animate","transition","duration","imageElement","_Fragment","GetVideoElement","y"],"sourceRoot":""}