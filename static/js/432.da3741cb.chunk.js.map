{"version":3,"file":"static/js/432.da3741cb.chunk.js","mappings":"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","sources":["components/Line.tsx","components/header/Navbar.tsx","components/header/LanguageSelector.tsx","components/header/Header.tsx"],"sourcesContent":["import './Line.css';\r\n\r\nconst Line = () => {\r\n    return (\r\n        <div className=\"line\"></div>\r\n    )\r\n}\r\n\r\nexport default Line;","import {ShowAboutDescription, ShowHomeDescription} from '../home/Home';\r\nimport {useTranslation} from 'react-i18next';\r\nimport {useState} from 'react';\r\nimport menuImage from '../../images/menu.png'\r\nimport menuActiveImage from '../../images/menu-active.png'\r\nimport './Navbar.css';\r\n\r\nconst Navbar = () => {\r\n    const { t, i18n } = useTranslation();\r\n    \r\n    const [currentMenuImage, SetCurrentMenuImage] = useState(menuImage);\r\n    const [isMenuCollapsed, SetIsMenuCollapsed] = useState(true);\r\n    \r\n    function HandleInput() : void {\r\n        SetIsMenuCollapsed(!isMenuCollapsed);\r\n\r\n        isMenuCollapsed ? SetCurrentMenuImage(menuActiveImage) : SetCurrentMenuImage(menuImage);\r\n    }\r\n\r\n    function HandleAnchorClick(descriptionToOpen : string) : void {\r\n        if(descriptionToOpen === \"home\"){\r\n            ShowHomeDescription();\r\n        }\r\n        else if (descriptionToOpen === \"about\") {\r\n            ShowAboutDescription();\r\n        }\r\n\r\n        SetIsMenuCollapsed(false);\r\n        SetCurrentMenuImage(menuImage);\r\n        \r\n        document.getElementById(\"menuBar\")?.click();\r\n    }\r\n    \r\n    return (\r\n        <nav>\r\n            <input id=\"menuBar\" type=\"checkbox\" onInput={() : void => {HandleInput()}}></input>\r\n            <label className=\"menuBarLabel\" htmlFor=\"menuBar\">\r\n                <img src={currentMenuImage} alt=\"menu button\"></img>\r\n            </label>\r\n            <ul className=\"ulContainer\">\r\n                <li>\r\n                    <a href={\"#top\"} onClick={() : void => {HandleAnchorClick(\"home\")}}>\r\n                        {t(\"homeNavButton\")}\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                    <a href={\"#home\"} onClick={() : void => {HandleAnchorClick(\"about\")}}>\r\n                        {t(\"aboutMeNavButton\")}\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                    <a href={\"#games\"} onClick={() : void => {HandleAnchorClick(\"\")}}>\r\n                        {t(\"gamesNavButton\")}\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                    <a href={\"#contacts\"} onClick={() : void => {HandleAnchorClick(\"\")}}>\r\n                        {t(\"contactsNavButton\")}\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import {useEffect} from \"react\";\r\nimport {useTranslation} from 'react-i18next';\r\nimport usaImage from '../../images/usa.png';\r\nimport brazilImage from '../../images/brazil.png';\r\nimport './LanguagesSelector.css';\r\n\r\nconst LanguageSelector = () => {\r\n    const { t, i18n } = useTranslation();\r\n\r\n    const englishId : string = \"en-US\";\r\n    const portugueseId : string = \"pt-BR\";\r\n    \r\n    useEffect(() : void => {\r\n        HandleButtonActive(i18n.language);\r\n    }, []);\r\n    \r\n    function HandleClick(language: string): void {\r\n        i18n.changeLanguage(language);\r\n\r\n        HandleButtonActive(language);\r\n    }\r\n\r\n    function HandleButtonActive(language: string) : void {\r\n        const languages : Element | null = document.querySelector(\".languages\");\r\n\r\n        if (languages) {\r\n            const activeLanguage : Element | null = languages.querySelector(\".active\");\r\n\r\n            if (activeLanguage) {\r\n                activeLanguage.classList.remove(\"active\");\r\n            }\r\n        }\r\n\r\n        SetCurrentLanguageButtonActive(language);\r\n    }\r\n    \r\n    function SetCurrentLanguageButtonActive(language: string) : void {\r\n        const languageButtons : NodeListOf<Element> = document.querySelectorAll(\".languages a\");\r\n\r\n        languageButtons.forEach(el => {\r\n            if(el.id === language){\r\n                el.classList.add(\"active\");\r\n            }\r\n        })\r\n    }\r\n    \r\n    return (\r\n        <div className=\"languages\">\r\n            <a id={englishId} onClick={() => HandleClick(englishId)}>\r\n                <img src={usaImage} alt=\"usa icon\"></img>\r\n            </a>\r\n            <a id={portugueseId} onClick={() => HandleClick(portugueseId)}>\r\n                <img src={brazilImage} alt=\"brazil icon\"></img>\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LanguageSelector;","import Line from '../Line';\r\nimport Navbar from './Navbar';\r\nimport LanguageSelector from './LanguageSelector';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <Line />\r\n            <div className=\"headerContainer\">\r\n                <Navbar />\r\n                <LanguageSelector />\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;"],"names":["Line","_jsx","className","Navbar","t","i18n","useTranslation","currentMenuImage","SetCurrentMenuImage","useState","menuImage","isMenuCollapsed","SetIsMenuCollapsed","HandleAnchorClick","descriptionToOpen","_document$getElementB","ShowHomeDescription","ShowAboutDescription","document","getElementById","click","_jsxs","children","id","type","onInput","menuActiveImage","htmlFor","src","alt","href","onClick","LanguageSelector","englishId","portugueseId","HandleClick","language","changeLanguage","HandleButtonActive","languages","querySelector","activeLanguage","classList","remove","querySelectorAll","forEach","el","add","SetCurrentLanguageButtonActive","useEffect","Header"],"sourceRoot":""}