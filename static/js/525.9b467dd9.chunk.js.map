{"version":3,"file":"static/js/525.9b467dd9.chunk.js","mappings":"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","sources":["components/Reveal.tsx","components/games/GameVideo.tsx","components/games/GameButtonDisabled.tsx","components/games/GameButton.tsx","components/games/GameDescription.tsx","components/games/GameSideMenu.tsx","components/games/GameItemReveal.tsx","components/games/GameItem.tsx","components/Utils.tsx","../node_modules/framer-motion/dist/es/animation/hooks/animation-controls.mjs","../node_modules/framer-motion/dist/es/animation/hooks/use-animation.mjs","../node_modules/framer-motion/dist/es/render/dom/viewport/index.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/resolve-element.mjs","../node_modules/framer-motion/dist/es/utils/use-in-view.mjs"],"sourcesContent":["import {motion, useInView, useAnimation, AnimationControls} from \"framer-motion\";\r\nimport React, { useEffect, useRef } from \"react\";\r\n\r\ninterface Props {\r\n    children: JSX.Element;\r\n    delay?: number;\r\n}\r\n\r\nexport const Reveal = ({ children, delay }: Props) => {\r\n    const ref : React.MutableRefObject<null> = useRef(null);\r\n    const isInView : boolean = useInView(ref, { once: true });\r\n\r\n    const mainControls : AnimationControls = useAnimation();\r\n\r\n    useEffect(() : void => {\r\n        if (isInView) {\r\n            mainControls.start(\"visible\");\r\n        }\r\n    }, [isInView])\r\n\r\n    return (\r\n        <motion.div\r\n            ref={ref}\r\n            variants={{\r\n                hidden: { opacity: 0, y: 75 },\r\n                visible: { opacity: 1, y: 0 },\r\n            }}\r\n            initial=\"hidden\"\r\n            animate={mainControls}\r\n            transition={{ duration: 1, delay: delay }}>\r\n            {children}\r\n        </motion.div>\r\n    )\r\n}","import './GameVideo.css';\r\n\r\ninterface Props {\r\n    videoUrl: string;\r\n    onPlay: () => void;\r\n}\r\n\r\nconst GameVideo = ({ videoUrl, onPlay }: Props) => {\r\n    return (\r\n        <video\r\n            className=\"gameVideo\"\r\n            controls={false}\r\n            autoPlay={true}\r\n            muted={true}\r\n            loop={true}\r\n            onPlay={onPlay}>\r\n            <source src={videoUrl} type=\"video/mp4\"/>\r\n        </video>\r\n    )\r\n}\r\n\r\nexport default GameVideo;","import {useTranslation} from 'react-i18next';\r\nimport './GameButtonDisabled.css';\r\n\r\nconst GameButtonDisabled = () => {\r\n    const { t, i18n } = useTranslation();\r\n\r\n    return (\r\n        <div className=\"disabledButtonContainer\">\r\n            <button type=\"submit\" disabled>\r\n                {t(\"disabledGameButton\")}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameButtonDisabled;","import GameButtonDisabled from './GameButtonDisabled';\r\nimport itchImage from '../../images/itchio.png';\r\nimport steamImage from '../../images/steam.png';\r\nimport './GameButton.css';\r\n\r\ninterface Props{\r\n    store: string;\r\n    url: string;\r\n}\r\n\r\nconst GameButton = ({store, url}: Props) => {\r\n    function GetGameButton() : JSX.Element {\r\n        if(url !== \"\"){\r\n            return (\r\n                <div className=\"buttonContainer\">\r\n                    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        <img className={GetStoreImgClass(store)} src={GetStoreImage(store)} alt=\"store icon\"></img>\r\n                    </a>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return <GameButtonDisabled />\r\n    }\r\n    \r\n    function GetStoreImgClass(store: string) : string {\r\n        return store === \"itch\" ? \"itchLogo\" : \"steamLogo\";\r\n    }\r\n\r\n    function GetStoreImage(store: string) : string {\r\n        return store === \"itch\" ? itchImage : steamImage;\r\n    }\r\n    \r\n    return (\r\n        <div>{GetGameButton()}</div>\r\n    )\r\n}\r\n\r\nexport default GameButton;","import React from \"react\";\r\nimport GameButton from './GameButton';\r\nimport {useTranslation} from 'react-i18next';\r\nimport {Reveal} from \"../Reveal\";\r\nimport closeImage from '../../images/close-image.png';\r\nimport './GameDescription.css';\r\n\r\ninterface Props {\r\n    name: string;\r\n    synopses: string;\r\n    description: string;\r\n    store: string;\r\n    url: string;\r\n    onCloseButtonClick: () => void;\r\n}\r\n\r\nconst GameDescription = ({name, synopses, description, store, url, onCloseButtonClick} : Props) => {\r\n    const { t, i18n } = useTranslation();\r\n    \r\n    const delay : number = 0.1;\r\n    \r\n    return (\r\n        <Reveal delay={delay}>\r\n            <div className=\"gameDescriptionContainer\">\r\n                <Reveal delay={delay}>\r\n                    <h1>\r\n                        {name}\r\n                        <div className=\"gameDescriptionLine\"></div>\r\n                    </h1>\r\n                </Reveal>\r\n                <Reveal delay={delay}>\r\n                    <em>\r\n                        <p className=\"synopses\">\r\n                            {t(synopses)}\r\n                        </p>\r\n                    </em>\r\n                </Reveal>\r\n                <Reveal delay={delay}>\r\n                    <p className=\"description\">\r\n                        {t(description)}\r\n                    </p>\r\n                </Reveal>\r\n                <Reveal delay={delay}>\r\n                    <GameButton store={store} url={url} />\r\n                </Reveal>\r\n                <a className=\"closeButton\" onClick={onCloseButtonClick}>\r\n                    <img src={closeImage} alt=\"close image\"/>\r\n                </a>\r\n            </div>\r\n        </Reveal>\r\n    )\r\n}\r\n\r\nexport default GameDescription;","import infoIcon from '../../images/info-icon.png';\r\nimport './GameSideMenu.css';\r\n\r\ninterface Props {\r\n    title: string;\r\n    onInfoClick: () => void;\r\n}\r\n\r\nconst GameSideMenu = ({ title, onInfoClick }: Props) => {\r\n    return (\r\n        <div className=\"gameSideMenuContainer\">\r\n            <h1>\r\n                {title}\r\n            </h1>\r\n            <a onClick={onInfoClick} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <img src={infoIcon} alt=\"information icon\"></img>\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameSideMenu;","import {AnimationControls, motion, useAnimation, useInView} from \"framer-motion\";\r\nimport React, {useEffect, useRef} from \"react\";\r\n\r\ninterface Props {\r\n    children: JSX.Element;\r\n}\r\n\r\nexport const GameItemReveal = ({ children }: Props) => {\r\n    const ref : React.MutableRefObject<null> = useRef(null);\r\n    const isInView : boolean = useInView(ref, { once: true });\r\n\r\n    const mainControls : AnimationControls = useAnimation();\r\n\r\n    useEffect(() : void => {\r\n        if (isInView) {\r\n            mainControls.start(\"visible\");\r\n        }\r\n    }, [isInView])\r\n\r\n    return (\r\n        <motion.div\r\n            ref={ref}\r\n            variants={{\r\n                hidden: { scale: 0.8 },\r\n                visible: { scale: 1 },\r\n            }}\r\n            initial=\"hidden\"\r\n            animate={mainControls}\r\n            transition={{ duration: 1 }}>\r\n            {children}\r\n        </motion.div>\r\n    )\r\n}","import React, {RefObject, useRef, useState} from 'react';\r\nimport GameVideo from './GameVideo';\r\nimport GameDescription from './GameDescription';\r\nimport GameSideMenu from './GameSideMenu';\r\nimport useOnScreen from \"../Utils\";\r\nimport {Reveal} from \"../Reveal\";\r\nimport {GameItemReveal} from \"./GameItemReveal\";\r\nimport './GameItem.css';\r\n\r\ninterface Props {\r\n    id: string;\r\n    title: string;\r\n    synopses: string;\r\n    description: string;\r\n    store: \"steam\" | \"itch\";\r\n    url?: string;\r\n    videoUrl: string;\r\n    imageUrl: string;\r\n    gifUrl: string;\r\n    side: \"right\" | \"left\";\r\n    shadow?: \"top\" | \"bottom\"\r\n}\r\n\r\nconst GameItem = ({id, title, synopses, description, store = \"itch\", url = \"\", videoUrl, gifUrl, imageUrl, side, shadow}: Props) => {\r\n    const [videoHasStarted, SetVideoHasStarted] = useState(false);\r\n    \r\n    const mediaRef : RefObject<HTMLDivElement> = useRef<HTMLDivElement>(null)\r\n    const gameImageRef : RefObject<HTMLImageElement> = useRef<HTMLImageElement>(null)\r\n\r\n    const mediaIsVisible : boolean = useOnScreen(mediaRef)\r\n    \r\n    const gameDescriptionRef : RefObject<HTMLDivElement> = useRef<HTMLDivElement>(null); \r\n    const gameSideMenuRef : RefObject<HTMLDivElement> = useRef<HTMLDivElement>(null);\r\n\r\n    const mediaQueryList : MediaQueryList = window.matchMedia(\"(min-width: 45em)\");\r\n\r\n    mediaQueryList.addEventListener(\"change\", function() : void {\r\n        if (mediaQueryList.matches) {\r\n            ShowGameDescription();\r\n        }\r\n        else {\r\n            ShowGameSideMenu();\r\n        }\r\n    });\r\n    \r\n    function ShowGameDescription() : void {\r\n        SetDisplay(gameDescriptionRef.current, \"flex\")\r\n        SetDisplay(gameSideMenuRef.current, \"none\")\r\n    }\r\n    \r\n    function ShowGameSideMenu() : void {\r\n        SetDisplay(gameSideMenuRef.current, \"flex\")\r\n        SetDisplay(gameDescriptionRef.current, \"none\")\r\n    }\r\n\r\n    function GetVideoElement() : JSX.Element {\r\n        if (!mediaQueryList.matches) {\r\n            return <></>\r\n        }\r\n        \r\n        const imageElement : JSX.Element = <img ref={gameImageRef} src={imageUrl} alt=\"game image\" />;\r\n\r\n        if (gameImageRef.current) {\r\n            gameImageRef.current.style.opacity = videoHasStarted ? \"0\" : \"1\";\r\n        }\r\n        \r\n        if (mediaIsVisible || videoHasStarted) {\r\n            return (\r\n                <div className=\"videoContainer\">\r\n                    {imageElement}\r\n                    <GameVideo videoUrl={videoUrl} onPlay={() => SetVideoHasStarted(true)} />\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return imageElement;\r\n    }\r\n\r\n    function GetClassName() : string {\r\n        let className : string = \"gamesItem \" + id + \" \" + side + \" \";\r\n\r\n        if (shadow) {\r\n            className += shadow + \"Shadow\";\r\n        }\r\n\r\n        return className;\r\n    }\r\n    \r\n    function SetDisplay(current : HTMLDivElement | null, display : string) : void {\r\n        if (current) {\r\n            current.style.display = display;\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <Reveal>\r\n            <GameItemReveal>\r\n                <div className={side}>\r\n                    <div className={GetClassName()}>\r\n                        <div ref={mediaRef} className=\"mediaContainer\">\r\n                            <img className=\"gameGif\" src={gifUrl} alt=\"game gif\" />\r\n                            {GetVideoElement()}\r\n                        </div>\r\n                        <div ref={gameDescriptionRef} id=\"gameDescription\" className={side}>\r\n                            <GameDescription name={title}\r\n                                             synopses={synopses}\r\n                                             description={description}\r\n                                             store={store}\r\n                                             url={url}\r\n                                             onCloseButtonClick={ShowGameSideMenu}/>\r\n                        </div>\r\n                        <div ref={gameSideMenuRef} id=\"gameSideMenu\" className={side}>\r\n                            <GameSideMenu title={title} onInfoClick={ShowGameDescription} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </GameItemReveal>\r\n        </Reveal>\r\n    )\r\n}\r\n\r\nexport default GameItem;","import {RefObject, useEffect, useMemo, useState} from \"react\";\r\n\r\nexport default function useOnScreen(ref: RefObject<HTMLElement>) : boolean {\r\n    const [isIntersecting, setIntersecting] = useState(false)\r\n\r\n    const observer = useMemo(() => new IntersectionObserver(\r\n        ([entry]) => setIntersecting(entry.isIntersecting)\r\n    ), [ref])\r\n\r\n\r\n    useEffect(() => {\r\n        if (ref.current) {\r\n            observer.observe(ref.current)\r\n            return () => observer.disconnect()\r\n        }\r\n        else {\r\n            console.log(\"Ref current is null!\")\r\n        }\r\n    }, [])\r\n\r\n    return isIntersecting\r\n}","import { invariant } from '../../utils/errors.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { animateVisualElement } from '../interfaces/visual-element.mjs';\n\nfunction stopAnimation(visualElement) {\n    visualElement.values.forEach((value) => value.stop());\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [...variantLabels].reverse();\n    reversedLabels.forEach((key) => {\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        if (visualElement.variantChildren) {\n            visualElement.variantChildren.forEach((child) => {\n                setVariants(child, variantLabels);\n            });\n        }\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    }\n    else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [definition]);\n    }\n    else {\n        setTarget(visualElement, definition);\n    }\n}\n/**\n * @public\n */\nfunction animationControls() {\n    /**\n     * Track whether the host component has mounted.\n     */\n    let hasMounted = false;\n    /**\n     * A collection of linked component animation controls.\n     */\n    const subscribers = new Set();\n    const controls = {\n        subscribe(visualElement) {\n            subscribers.add(visualElement);\n            return () => void subscribers.delete(visualElement);\n        },\n        start(definition, transitionOverride) {\n            invariant(hasMounted, \"controls.start() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            const animations = [];\n            subscribers.forEach((visualElement) => {\n                animations.push(animateVisualElement(visualElement, definition, {\n                    transitionOverride,\n                }));\n            });\n            return Promise.all(animations);\n        },\n        set(definition) {\n            invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            return subscribers.forEach((visualElement) => {\n                setValues(visualElement, definition);\n            });\n        },\n        stop() {\n            subscribers.forEach((visualElement) => {\n                stopAnimation(visualElement);\n            });\n        },\n        mount() {\n            hasMounted = true;\n            return () => {\n                hasMounted = false;\n                controls.stop();\n            };\n        },\n    };\n    return controls;\n}\n\nexport { animationControls, setValues };\n","import { animationControls } from './animation-controls.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n\n/**\n * Creates `AnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `AnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */\nfunction useAnimationControls() {\n    const controls = useConstant(animationControls);\n    useIsomorphicLayoutEffect(controls.mount, []);\n    return controls;\n}\nconst useAnimation = useAnimationControls;\n\nexport { useAnimation, useAnimationControls };\n","import { resolveElements } from '../utils/resolve-element.mjs';\n\nconst thresholds = {\n    some: 0,\n    all: 1,\n};\nfunction inView(elementOrSelector, onStart, { root, margin: rootMargin, amount = \"some\" } = {}) {\n    const elements = resolveElements(elementOrSelector);\n    const activeIntersections = new WeakMap();\n    const onIntersectionChange = (entries) => {\n        entries.forEach((entry) => {\n            const onEnd = activeIntersections.get(entry.target);\n            /**\n             * If there's no change to the intersection, we don't need to\n             * do anything here.\n             */\n            if (entry.isIntersecting === Boolean(onEnd))\n                return;\n            if (entry.isIntersecting) {\n                const newOnEnd = onStart(entry);\n                if (typeof newOnEnd === \"function\") {\n                    activeIntersections.set(entry.target, newOnEnd);\n                }\n                else {\n                    observer.unobserve(entry.target);\n                }\n            }\n            else if (onEnd) {\n                onEnd(entry);\n                activeIntersections.delete(entry.target);\n            }\n        });\n    };\n    const observer = new IntersectionObserver(onIntersectionChange, {\n        root,\n        rootMargin,\n        threshold: typeof amount === \"number\" ? amount : thresholds[amount],\n    });\n    elements.forEach((element) => observer.observe(element));\n    return () => observer.disconnect();\n}\n\nexport { inView };\n","import { invariant } from '../../../utils/errors.mjs';\n\nfunction resolveElements(elements, scope, selectorCache) {\n    var _a;\n    if (typeof elements === \"string\") {\n        let root = document;\n        if (scope) {\n            invariant(Boolean(scope.current), \"Scope provided, but no element detected.\");\n            root = scope.current;\n        }\n        if (selectorCache) {\n            (_a = selectorCache[elements]) !== null && _a !== void 0 ? _a : (selectorCache[elements] = root.querySelectorAll(elements));\n            elements = selectorCache[elements];\n        }\n        else {\n            elements = root.querySelectorAll(elements);\n        }\n    }\n    else if (elements instanceof Element) {\n        elements = [elements];\n    }\n    /**\n     * Return an empty array\n     */\n    return Array.from(elements || []);\n}\n\nexport { resolveElements };\n","import { useState, useEffect } from 'react';\nimport { inView } from '../render/dom/viewport/index.mjs';\n\nfunction useInView(ref, { root, margin, amount, once = false } = {}) {\n    const [isInView, setInView] = useState(false);\n    useEffect(() => {\n        if (!ref.current || (once && isInView))\n            return;\n        const onEnter = () => {\n            setInView(true);\n            return once ? undefined : () => setInView(false);\n        };\n        const options = {\n            root: (root && root.current) || undefined,\n            margin,\n            amount,\n        };\n        return inView(ref.current, onEnter, options);\n    }, [root, ref, margin, once, amount]);\n    return isInView;\n}\n\nexport { useInView };\n"],"names":["Reveal","children","delay","ref","useRef","isInView","useInView","once","mainControls","useAnimation","useEffect","start","_jsx","motion","div","variants","hidden","opacity","y","visible","initial","animate","transition","duration","GameVideo","videoUrl","onPlay","className","controls","autoPlay","muted","loop","src","type","GameButtonDisabled","t","i18n","useTranslation","disabled","GameButton","store","url","GetStoreImgClass","GetStoreImage","itchImage","steamImage","href","target","rel","alt","GameDescription","name","synopses","description","onCloseButtonClick","_jsxs","onClick","GameSideMenu","title","onInfoClick","GameItemReveal","scale","GameItem","id","gifUrl","imageUrl","side","shadow","videoHasStarted","SetVideoHasStarted","useState","mediaRef","gameImageRef","mediaIsVisible","isIntersecting","setIntersecting","observer","useMemo","IntersectionObserver","entry","current","observe","disconnect","console","log","useOnScreen","gameDescriptionRef","gameSideMenuRef","mediaQueryList","window","matchMedia","ShowGameDescription","SetDisplay","ShowGameSideMenu","display","style","addEventListener","matches","GetClassName","_Fragment","imageElement","GetVideoElement","setVariants","visualElement","variantLabels","reverse","forEach","key","variant","getVariant","setTarget","variantChildren","child","animationControls","hasMounted","subscribers","Set","subscribe","add","delete","definition","transitionOverride","invariant","animations","push","animateVisualElement","Promise","all","set","Array","isArray","setValues","stop","values","value","stopAnimation","mount","useConstant","useIsomorphicLayoutEffect","thresholds","some","inView","elementOrSelector","onStart","root","margin","rootMargin","amount","elements","scope","selectorCache","_a","document","Boolean","querySelectorAll","Element","from","resolveElements","activeIntersections","WeakMap","entries","onEnd","get","newOnEnd","unobserve","threshold","element","setInView","options","undefined","onEnter"],"sourceRoot":""}