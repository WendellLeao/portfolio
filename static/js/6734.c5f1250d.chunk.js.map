{"version":3,"file":"static/js/6734.c5f1250d.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/updater-tilt/browser/Options/Classes/TiltAnimation.js","../node_modules/@tsparticles/updater-tilt/browser/Options/Classes/Tilt.js","../node_modules/@tsparticles/updater-tilt/browser/TiltUpdater.js"],"sourcesContent":["import { setRangeValue } from \"@tsparticles/engine\";\nexport class TiltAnimation {\n    constructor() {\n        this.enable = false;\n        this.speed = 0;\n        this.decay = 0;\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n","import { ValueWithRandom } from \"@tsparticles/engine\";\nimport { TiltAnimation } from \"./TiltAnimation.js\";\nexport class Tilt extends ValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new TiltAnimation();\n        this.direction = \"clockwise\";\n        this.enable = false;\n        this.value = 0;\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        this.animation.load(data.animation);\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n    }\n}\n","import { degToRad, getRandom, getRangeValue, halfRandom, updateAnimation, } from \"@tsparticles/engine\";\nimport { Tilt } from \"./Options/Classes/Tilt.js\";\nconst identity = 1, double = 2, doublePI = Math.PI * double, maxAngle = 360;\nexport class TiltUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    getTransformValues(particle) {\n        const tilt = particle.tilt?.enable && particle.tilt;\n        return {\n            b: tilt ? Math.cos(tilt.value) * tilt.cosDirection : undefined,\n            c: tilt ? Math.sin(tilt.value) * tilt.sinDirection : undefined,\n        };\n    }\n    init(particle) {\n        const tiltOptions = particle.options.tilt;\n        if (!tiltOptions) {\n            return;\n        }\n        particle.tilt = {\n            enable: tiltOptions.enable,\n            value: degToRad(getRangeValue(tiltOptions.value)),\n            sinDirection: getRandom() >= halfRandom ? identity : -identity,\n            cosDirection: getRandom() >= halfRandom ? identity : -identity,\n            min: 0,\n            max: doublePI,\n        };\n        let tiltDirection = tiltOptions.direction;\n        if (tiltDirection === \"random\") {\n            const index = Math.floor(getRandom() * double), minIndex = 0;\n            tiltDirection = index > minIndex ? \"counter-clockwise\" : \"clockwise\";\n        }\n        switch (tiltDirection) {\n            case \"counter-clockwise\":\n            case \"counterClockwise\":\n                particle.tilt.status = \"decreasing\";\n                break;\n            case \"clockwise\":\n                particle.tilt.status = \"increasing\";\n                break;\n        }\n        const tiltAnimation = particle.options.tilt?.animation;\n        if (tiltAnimation?.enable) {\n            particle.tilt.decay = identity - getRangeValue(tiltAnimation.decay);\n            particle.tilt.velocity =\n                (getRangeValue(tiltAnimation.speed) / maxAngle) * this.container.retina.reduceFactor;\n            if (!tiltAnimation.sync) {\n                particle.tilt.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        const tiltAnimation = particle.options.tilt?.animation;\n        return !particle.destroyed && !particle.spawning && !!tiltAnimation?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.tilt) {\n            options.tilt = new Tilt();\n        }\n        for (const source of sources) {\n            options.tilt.load(source?.tilt);\n        }\n    }\n    async update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.tilt) {\n            return;\n        }\n        updateAnimation(particle, particle.tilt, false, \"none\", delta);\n        await Promise.resolve();\n    }\n}\n"],"names":["TiltAnimation","constructor","this","enable","speed","decay","sync","load","data","undefined","setRangeValue","Tilt","ValueWithRandom","super","animation","direction","value","doublePI","Math","PI","TiltUpdater","container","getTransformValues","particle","tilt","b","cos","cosDirection","c","sin","sinDirection","init","tiltOptions","options","degToRad","getRangeValue","getRandom","halfRandom","min","max","tiltDirection","floor","status","tiltAnimation","velocity","retina","reduceFactor","isEnabled","destroyed","spawning","loadOptions","sources","source","update","delta","updateAnimation","Promise","resolve"],"sourceRoot":""}