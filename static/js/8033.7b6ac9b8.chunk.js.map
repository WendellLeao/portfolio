{"version":3,"file":"static/js/8033.7b6ac9b8.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/plugin-emitters/browser/EmitterInstance.js"],"sourcesContent":["import { Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, getSize, isPointInside, itemFromSingleOrMultiple, millisecondsToSeconds, randomInRange, rangeColorToHsl, } from \"@tsparticles/engine\";\nimport { Emitter } from \"./Options/Classes/Emitter.js\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize.js\";\nconst half = 0.5, defaultLifeDelay = 0, minLifeCount = 0, defaultSpawnDelay = 0, defaultEmitDelay = 0, defaultLifeCount = -1, defaultColorAnimationFactor = 1;\nfunction setParticlesOptionsColor(particlesOptions, color) {\n    if (particlesOptions.color) {\n        particlesOptions.color.value = color;\n    }\n    else {\n        particlesOptions.color = {\n            value: color,\n        };\n    }\n}\nexport class EmitterInstance {\n    constructor(engine, emitters, container, options, position) {\n        this.emitters = emitters;\n        this.container = container;\n        this._destroy = () => {\n            this._mutationObserver?.disconnect();\n            this._mutationObserver = undefined;\n            this._resizeObserver?.disconnect();\n            this._resizeObserver = undefined;\n            this.emitters.removeEmitter(this);\n            this._engine.dispatchEvent(\"emitterDestroyed\", {\n                container: this.container,\n                data: {\n                    emitter: this,\n                },\n            });\n        };\n        this._prepareToDie = () => {\n            if (this._paused) {\n                return;\n            }\n            const duration = this.options.life?.duration !== undefined ? getRangeValue(this.options.life.duration) : undefined, minDuration = 0, minLifeCount = 0;\n            if (this.container.retina.reduceFactor &&\n                (this._lifeCount > minLifeCount || this._immortal) &&\n                duration !== undefined &&\n                duration > minDuration) {\n                this._duration = duration * millisecondsToSeconds;\n            }\n        };\n        this._setColorAnimation = (animation, initValue, maxValue, factor = defaultColorAnimationFactor) => {\n            const container = this.container;\n            if (!animation.enable) {\n                return initValue;\n            }\n            const colorOffset = randomInRange(animation.offset), delay = getRangeValue(this.options.rate.delay), emitFactor = (delay * millisecondsToSeconds) / container.retina.reduceFactor, defaultColorSpeed = 0, colorSpeed = getRangeValue(animation.speed ?? defaultColorSpeed);\n            return (initValue + (colorSpeed * container.fpsLimit) / emitFactor + colorOffset * factor) % maxValue;\n        };\n        this._engine = engine;\n        this._currentDuration = 0;\n        this._currentEmitDelay = 0;\n        this._currentSpawnDelay = 0;\n        this._initialPosition = position;\n        if (options instanceof Emitter) {\n            this.options = options;\n        }\n        else {\n            this.options = new Emitter();\n            this.options.load(options);\n        }\n        this._spawnDelay =\n            (getRangeValue(this.options.life.delay ?? defaultLifeDelay) * millisecondsToSeconds) /\n                this.container.retina.reduceFactor;\n        this.position = this._initialPosition ?? this._calcPosition();\n        this.name = this.options.name;\n        this.fill = this.options.fill;\n        this._firstSpawn = !this.options.life.wait;\n        this._startParticlesAdded = false;\n        let particlesOptions = deepExtend({}, this.options.particles);\n        particlesOptions ??= {};\n        particlesOptions.move ??= {};\n        particlesOptions.move.direction ??= this.options.direction;\n        if (this.options.spawnColor) {\n            this.spawnColor = rangeColorToHsl(this.options.spawnColor);\n        }\n        this._paused = !this.options.autoPlay;\n        this._particlesOptions = particlesOptions;\n        this._size = this._calcSize();\n        this.size = getSize(this._size, this.container.canvas.size);\n        this._lifeCount = this.options.life.count ?? defaultLifeCount;\n        this._immortal = this._lifeCount <= minLifeCount;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                this._mutationObserver = new MutationObserver(() => {\n                    this.resize();\n                });\n                this._resizeObserver = new ResizeObserver(() => {\n                    this.resize();\n                });\n                this._mutationObserver.observe(element, {\n                    attributes: true,\n                    attributeFilter: [\"style\", \"width\", \"height\"],\n                });\n                this._resizeObserver.observe(element);\n            }\n        }\n        const shapeOptions = this.options.shape, shapeGenerator = this._engine.emitterShapeManager?.getShapeGenerator(shapeOptions.type);\n        if (shapeGenerator) {\n            this._shape = shapeGenerator.generate(this.position, this.size, this.fill, shapeOptions.options);\n        }\n        this._engine.dispatchEvent(\"emitterCreated\", {\n            container,\n            data: {\n                emitter: this,\n            },\n        });\n        this.play();\n    }\n    externalPause() {\n        this._paused = true;\n        this.pause();\n    }\n    externalPlay() {\n        this._paused = false;\n        this.play();\n    }\n    async init() {\n        await this._shape?.init();\n    }\n    pause() {\n        if (this._paused) {\n            return;\n        }\n        delete this._emitDelay;\n    }\n    play() {\n        if (this._paused) {\n            return;\n        }\n        if (!(this.container.retina.reduceFactor &&\n            (this._lifeCount > minLifeCount || this._immortal || !this.options.life.count) &&\n            (this._firstSpawn || this._currentSpawnDelay >= (this._spawnDelay ?? defaultSpawnDelay)))) {\n            return;\n        }\n        if (this._emitDelay === undefined) {\n            const delay = getRangeValue(this.options.rate.delay);\n            this._emitDelay = (delay * millisecondsToSeconds) / this.container.retina.reduceFactor;\n        }\n        if (this._lifeCount > minLifeCount || this._immortal) {\n            this._prepareToDie();\n        }\n    }\n    resize() {\n        const initialPosition = this._initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n        this._size = this._calcSize();\n        this.size = getSize(this._size, this.container.canvas.size);\n        this._shape?.resize(this.position, this.size);\n    }\n    update(delta) {\n        if (this._paused) {\n            return;\n        }\n        if (this._firstSpawn) {\n            this._firstSpawn = false;\n            this._currentSpawnDelay = this._spawnDelay ?? defaultSpawnDelay;\n            this._currentEmitDelay = this._emitDelay ?? defaultEmitDelay;\n        }\n        if (!this._startParticlesAdded) {\n            this._startParticlesAdded = true;\n            this._emitParticles(this.options.startCount);\n        }\n        if (this._duration !== undefined) {\n            this._currentDuration += delta.value;\n            if (this._currentDuration >= this._duration) {\n                this.pause();\n                if (this._spawnDelay !== undefined) {\n                    delete this._spawnDelay;\n                }\n                if (!this._immortal) {\n                    this._lifeCount--;\n                }\n                if (this._lifeCount > minLifeCount || this._immortal) {\n                    this.position = this._calcPosition();\n                    this._shape?.resize(this.position, this.size);\n                    this._spawnDelay =\n                        (getRangeValue(this.options.life.delay ?? defaultLifeDelay) * millisecondsToSeconds) /\n                            this.container.retina.reduceFactor;\n                }\n                else {\n                    this._destroy();\n                }\n                this._currentDuration -= this._duration;\n                delete this._duration;\n            }\n        }\n        if (this._spawnDelay !== undefined) {\n            this._currentSpawnDelay += delta.value;\n            if (this._currentSpawnDelay >= this._spawnDelay) {\n                this._engine.dispatchEvent(\"emitterPlay\", {\n                    container: this.container,\n                });\n                this.play();\n                this._currentSpawnDelay -= this._currentSpawnDelay;\n                delete this._spawnDelay;\n            }\n        }\n        if (this._emitDelay !== undefined) {\n            this._currentEmitDelay += delta.value;\n            if (this._currentEmitDelay >= this._emitDelay) {\n                this._emit();\n                this._currentEmitDelay -= this._emitDelay;\n            }\n        }\n    }\n    _calcPosition() {\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect(), pxRatio = this.container.retina.pixelRatio;\n                return {\n                    x: (elRect.x + elRect.width * half) * pxRatio,\n                    y: (elRect.y + elRect.height * half) * pxRatio,\n                };\n            }\n        }\n        return calcPositionOrRandomFromSizeRanged({\n            size: this.container.canvas.size,\n            position: this.options.position,\n        });\n    }\n    _calcSize() {\n        const container = this.container;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    width: elRect.width * container.retina.pixelRatio,\n                    height: elRect.height * container.retina.pixelRatio,\n                    mode: \"precise\",\n                };\n            }\n        }\n        return (this.options.size ??\n            (() => {\n                const size = new EmitterSize();\n                size.load({\n                    height: 0,\n                    mode: \"percent\",\n                    width: 0,\n                });\n                return size;\n            })());\n    }\n    _emit() {\n        if (this._paused) {\n            return;\n        }\n        const quantity = getRangeValue(this.options.rate.quantity);\n        this._emitParticles(quantity);\n    }\n    _emitParticles(quantity) {\n        const singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);\n        for (let i = 0; i < quantity; i++) {\n            const particlesOptions = deepExtend({}, singleParticlesOptions);\n            if (this.spawnColor) {\n                const hslAnimation = this.options.spawnColor?.animation;\n                if (hslAnimation) {\n                    const maxValues = {\n                        h: 360,\n                        s: 100,\n                        l: 100,\n                    }, colorFactor = 3.6;\n                    this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, maxValues.h, colorFactor);\n                    this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, maxValues.s);\n                    this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, maxValues.l);\n                }\n                setParticlesOptionsColor(particlesOptions, this.spawnColor);\n            }\n            const shapeOptions = this.options.shape;\n            let position = this.position;\n            if (this._shape) {\n                const shapePosData = this._shape.randomPosition();\n                if (shapePosData) {\n                    position = shapePosData.position;\n                    const replaceData = shapeOptions.replace;\n                    if (replaceData.color && shapePosData.color) {\n                        setParticlesOptionsColor(particlesOptions, shapePosData.color);\n                    }\n                    if (replaceData.opacity) {\n                        if (particlesOptions.opacity) {\n                            particlesOptions.opacity.value = shapePosData.opacity;\n                        }\n                        else {\n                            particlesOptions.opacity = {\n                                value: shapePosData.opacity,\n                            };\n                        }\n                    }\n                }\n                else {\n                    position = null;\n                }\n            }\n            if (position) {\n                this.container.particles.addParticle(position, particlesOptions);\n            }\n        }\n    }\n}\n"],"names":["setParticlesOptionsColor","particlesOptions","color","value","EmitterInstance","constructor","engine","emitters","container","options","position","this","_destroy","_mutationObserver","disconnect","undefined","_resizeObserver","removeEmitter","_engine","dispatchEvent","data","emitter","_prepareToDie","_paused","duration","life","getRangeValue","retina","reduceFactor","_lifeCount","_immortal","_duration","millisecondsToSeconds","_setColorAnimation","animation","initValue","maxValue","factor","enable","colorOffset","randomInRange","offset","emitFactor","rate","delay","speed","fpsLimit","_currentDuration","_currentEmitDelay","_currentSpawnDelay","_initialPosition","Emitter","load","_spawnDelay","_calcPosition","name","fill","_firstSpawn","wait","_startParticlesAdded","deepExtend","particles","move","direction","spawnColor","rangeColorToHsl","autoPlay","_particlesOptions","_size","_calcSize","size","getSize","canvas","count","domId","element","document","getElementById","MutationObserver","resize","ResizeObserver","observe","attributes","attributeFilter","shapeOptions","shape","shapeGenerator","emitterShapeManager","getShapeGenerator","type","_shape","generate","play","externalPause","pause","externalPlay","init","_emitDelay","initialPosition","isPointInside","Vector","origin","update","delta","_emitParticles","startCount","_emit","elRect","getBoundingClientRect","pxRatio","pixelRatio","x","width","y","height","calcPositionOrRandomFromSizeRanged","mode","EmitterSize","quantity","singleParticlesOptions","itemFromSingleOrMultiple","i","hslAnimation","maxValues","h","s","l","colorFactor","shapePosData","randomPosition","replaceData","replace","opacity","addParticle"],"sourceRoot":""}