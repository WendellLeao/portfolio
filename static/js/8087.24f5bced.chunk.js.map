{"version":3,"file":"static/js/8087.24f5bced.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/plugin-absorbers/browser/AbsorberInstance.js"],"sourcesContent":["import { Vector, calcPositionOrRandomFromSize, calcPositionOrRandomFromSizeRanged, getDistance, getDistances, getRandom, getRangeValue, getStyleFromRgb, isPointInside, percentDenominator, rangeColorToRgb, } from \"@tsparticles/engine\";\nimport { Absorber } from \"./Options/Classes/Absorber.js\";\nconst squareExp = 2, absorbFactor = 0.033, minOrbitLength = 0, minRadius = 0, minMass = 0, origin = {\n    x: 0,\n    y: 0,\n}, minAngle = 0, double = 2, maxAngle = Math.PI * double, minVelocity = 0;\nexport class AbsorberInstance {\n    constructor(absorbers, container, options, position) {\n        this.absorbers = absorbers;\n        this.container = container;\n        this._calcPosition = () => {\n            const exactPosition = calcPositionOrRandomFromSizeRanged({\n                size: this.container.canvas.size,\n                position: this.options.position,\n            });\n            return Vector.create(exactPosition.x, exactPosition.y);\n        };\n        this._updateParticlePosition = (particle, v) => {\n            if (particle.destroyed) {\n                return;\n            }\n            const container = this.container, canvasSize = container.canvas.size;\n            if (particle.needsNewPosition) {\n                const newPosition = calcPositionOrRandomFromSize({ size: canvasSize });\n                particle.position.setTo(newPosition);\n                particle.velocity.setTo(particle.initialVelocity);\n                particle.absorberOrbit = undefined;\n                particle.needsNewPosition = false;\n            }\n            if (this.options.orbits) {\n                if (particle.absorberOrbit === undefined) {\n                    particle.absorberOrbit = Vector.origin;\n                    particle.absorberOrbit.length = getDistance(particle.getPosition(), this.position);\n                    particle.absorberOrbit.angle = getRandom() * maxAngle;\n                }\n                if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n                    const minSize = Math.min(canvasSize.width, canvasSize.height), offset = 1, randomOffset = 0.1, randomFactor = 0.2;\n                    particle.absorberOrbit.length = minSize * (offset + (getRandom() * randomFactor - randomOffset));\n                }\n                if (particle.absorberOrbitDirection === undefined) {\n                    particle.absorberOrbitDirection =\n                        particle.velocity.x >= minVelocity ? \"clockwise\" : \"counter-clockwise\";\n                }\n                const orbitRadius = particle.absorberOrbit.length, orbitAngle = particle.absorberOrbit.angle, orbitDirection = particle.absorberOrbitDirection;\n                particle.velocity.setTo(Vector.origin);\n                const updateFunc = {\n                    x: orbitDirection === \"clockwise\" ? Math.cos : Math.sin,\n                    y: orbitDirection === \"clockwise\" ? Math.sin : Math.cos,\n                };\n                particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n                particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n                particle.absorberOrbit.length -= v.length;\n                particle.absorberOrbit.angle +=\n                    (((particle.retina.moveSpeed ?? minVelocity) * container.retina.pixelRatio) / percentDenominator) *\n                        container.retina.reduceFactor;\n            }\n            else {\n                const addV = Vector.origin;\n                addV.length = v.length;\n                addV.angle = v.angle;\n                particle.velocity.addTo(addV);\n            }\n        };\n        this.initialPosition = position ? Vector.create(position.x, position.y) : undefined;\n        if (options instanceof Absorber) {\n            this.options = options;\n        }\n        else {\n            this.options = new Absorber();\n            this.options.load(options);\n        }\n        this.dragging = false;\n        this.name = this.options.name;\n        this.opacity = this.options.opacity;\n        this.size = getRangeValue(this.options.size.value) * container.retina.pixelRatio;\n        this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n        const limit = this.options.size.limit;\n        this.limit = {\n            radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n            mass: limit.mass,\n        };\n        this.color = rangeColorToRgb(this.options.color) ?? {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = this.initialPosition?.copy() ?? this._calcPosition();\n    }\n    attract(particle) {\n        const container = this.container, options = this.options;\n        if (options.draggable) {\n            const mouse = container.interactivity.mouse;\n            if (mouse.clicking && mouse.downPosition) {\n                const mouseDist = getDistance(this.position, mouse.downPosition);\n                if (mouseDist <= this.size) {\n                    this.dragging = true;\n                }\n            }\n            else {\n                this.dragging = false;\n            }\n            if (this.dragging && mouse.position) {\n                this.position.x = mouse.position.x;\n                this.position.y = mouse.position.y;\n            }\n        }\n        const pos = particle.getPosition(), { dx, dy, distance } = getDistances(this.position, pos), v = Vector.create(dx, dy);\n        v.length = (this.mass / Math.pow(distance, squareExp)) * container.retina.reduceFactor;\n        if (distance < this.size + particle.getRadius()) {\n            const sizeFactor = particle.getRadius() * absorbFactor * container.retina.pixelRatio;\n            if ((this.size > particle.getRadius() && distance < this.size - particle.getRadius()) ||\n                (particle.absorberOrbit !== undefined && particle.absorberOrbit.length < minOrbitLength)) {\n                if (options.destroy) {\n                    particle.destroy();\n                }\n                else {\n                    particle.needsNewPosition = true;\n                    this._updateParticlePosition(particle, v);\n                }\n            }\n            else {\n                if (options.destroy) {\n                    particle.size.value -= sizeFactor;\n                }\n                this._updateParticlePosition(particle, v);\n            }\n            if (this.limit.radius <= minRadius || this.size < this.limit.radius) {\n                this.size += sizeFactor;\n            }\n            if (this.limit.mass <= minMass || this.mass < this.limit.mass) {\n                this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n            }\n        }\n        else {\n            this._updateParticlePosition(particle, v);\n        }\n    }\n    draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(origin.x, origin.y, this.size, minAngle, maxAngle, false);\n        context.closePath();\n        context.fillStyle = getStyleFromRgb(this.color, this.opacity);\n        context.fill();\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n    }\n}\n"],"names":["origin","maxAngle","Math","PI","AbsorberInstance","constructor","absorbers","container","options","position","this","_calcPosition","exactPosition","calcPositionOrRandomFromSizeRanged","size","canvas","Vector","create","x","y","_updateParticlePosition","particle","v","destroyed","canvasSize","needsNewPosition","newPosition","calcPositionOrRandomFromSize","setTo","velocity","initialVelocity","absorberOrbit","undefined","orbits","length","getDistance","getPosition","angle","getRandom","destroy","minSize","min","width","height","offset","randomOffset","randomFactor","absorberOrbitDirection","orbitRadius","orbitAngle","orbitDirection","updateFunc","cos","sin","retina","moveSpeed","pixelRatio","percentDenominator","reduceFactor","addV","addTo","initialPosition","Absorber","load","dragging","name","opacity","getRangeValue","value","mass","density","limit","radius","color","rangeColorToRgb","b","g","r","copy","attract","draggable","mouse","interactivity","clicking","downPosition","pos","dx","dy","distance","getDistances","pow","getRadius","sizeFactor","draw","context","translate","beginPath","arc","closePath","fillStyle","getStyleFromRgb","fill","resize","isPointInside"],"sourceRoot":""}