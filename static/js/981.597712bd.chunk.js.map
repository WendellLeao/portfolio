{"version":3,"file":"static/js/981.597712bd.chunk.js","mappings":"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","sources":["components/GameButtonDisabled.tsx","components/GameButton.tsx","components/GameDescription.tsx","components/GameSideMenu.tsx","components/GameItem.tsx","../node_modules/framer-motion/dist/es/render/dom/viewport/index.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/resolve-element.mjs","../node_modules/framer-motion/dist/es/animation/hooks/animation-controls.mjs","../node_modules/framer-motion/dist/es/animation/hooks/use-animation.mjs","components/Reveal.tsx","../node_modules/framer-motion/dist/es/utils/use-in-view.mjs"],"sourcesContent":["import {useTranslation} from 'react-i18next';\r\nimport './GameButtonDisabled.css';\r\n\r\nconst GameButtonDisabled = () => {\r\n    const { t, i18n } = useTranslation();\r\n\r\n    return (\r\n        <div className=\"disabledButtonContainer\">\r\n            <button type=\"submit\" disabled>\r\n                {t(\"disabledGameButton\")}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameButtonDisabled;","import GameButtonDisabled from './GameButtonDisabled';\r\nimport itchImage from '../images/itchio.png';\r\nimport steamImage from '../images/steam.png';\r\nimport './GameButton.css';\r\n\r\ninterface Props{\r\n    store: string;\r\n    url: string;\r\n}\r\n\r\nconst GameButton = ({store, url}: Props) => {\r\n    function GetGameButton() : JSX.Element {\r\n        if(url !== \"\"){\r\n            return (\r\n                <div className=\"buttonContainer\">\r\n                    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        <img className={GetStoreImgClass(store)} src={GetStoreImage(store)} alt=\"store icon\"></img>\r\n                    </a>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return <GameButtonDisabled />\r\n    }\r\n    \r\n    function GetStoreImgClass(store: string) : string {\r\n        return store === \"itch\" ? \"itchLogo\" : \"steamLogo\";\r\n    }\r\n\r\n    function GetStoreImage(store: string) : string {\r\n        return store === \"itch\" ? itchImage : steamImage;\r\n    }\r\n    \r\n    return (\r\n        <div>{GetGameButton()}</div>\r\n    )\r\n}\r\n\r\nexport default GameButton;","import React from \"react\";\r\nimport GameButton from './GameButton';\r\nimport {useTranslation} from 'react-i18next';\r\nimport {Reveal} from \"./Reveal\";\r\nimport closeImage from '../images/close-image.png';\r\nimport './GameDescription.css';\r\n\r\ninterface Props {\r\n    name: string;\r\n    synopses: string;\r\n    description: string;\r\n    store: string;\r\n    url: string;\r\n    onCloseButtonClick: () => void;\r\n}\r\n\r\nconst GameDescription = ({name, synopses, description, store, url, onCloseButtonClick} : Props) => {\r\n    const { t, i18n } = useTranslation();\r\n    \r\n    return (\r\n        <Reveal>\r\n            <div className=\"gameDescriptionContainer\">\r\n                <Reveal>\r\n                    <h1>\r\n                        {name}\r\n                        <div className=\"gameDescriptionLine\"></div>\r\n                    </h1>\r\n                </Reveal>\r\n                <Reveal>\r\n                    <em>\r\n                        <p className=\"synopses\">\r\n                            {t(synopses)}\r\n                        </p>\r\n                    </em>\r\n                </Reveal>\r\n                <Reveal>\r\n                    <p className=\"description\">\r\n                        {t(description)}\r\n                    </p>\r\n                </Reveal>\r\n                <Reveal>\r\n                    <GameButton store={store} url={url} />\r\n                </Reveal>\r\n                <a className=\"closeButton\" onClick={onCloseButtonClick}>\r\n                    <img src={closeImage} alt=\"close image\"/>\r\n                </a>\r\n            </div>\r\n        </Reveal>\r\n    )\r\n}\r\n\r\nexport default GameDescription;","import infoIcon from '../images/info-icon.png';\r\nimport './GameSideMenu.css';\r\n\r\ninterface Props {\r\n    title: string;\r\n    onInfoClick: () => void;\r\n}\r\n\r\nconst GameSideMenu = ({ title, onInfoClick }: Props) => {\r\n    return (\r\n        <div className=\"gameSideMenuContainer\">\r\n            <h1>\r\n                {title}\r\n            </h1>\r\n            <a onClick={onInfoClick} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <img src={infoIcon} alt=\"information icon\"></img>\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameSideMenu;","import GameVideo from './GameVideo';\r\nimport GameDescription from './GameDescription';\r\nimport GameSideMenu from './GameSideMenu';\r\nimport {RefObject, useRef, useState} from 'react';\r\nimport './GameItem.css';\r\n\r\ninterface Props {\r\n    id: string;\r\n    title: string;\r\n    synopses: string;\r\n    description: string;\r\n    store: \"steam\" | \"itch\";\r\n    url?: string;\r\n    videoUrl: string;\r\n    imageUrl: string;\r\n    side: \"right\" | \"left\";\r\n    shadow?: \"top\" | \"bottom\"\r\n}\r\n\r\nconst GameItem = ({id, title, synopses, description, store = \"itch\", url = \"\", videoUrl, imageUrl, side, shadow}: Props) => {\r\n    const gameDescriptionRef : RefObject<HTMLDivElement> = useRef<HTMLDivElement>(null); \r\n    const gameSideMenuRef : RefObject<HTMLDivElement> = useRef<HTMLDivElement>(null);\r\n\r\n    const mediaQueryList : MediaQueryList = window.matchMedia(\"(min-width: 45em)\");\r\n\r\n    mediaQueryList.addEventListener(\"change\", function() : void {\r\n        if(mediaQueryList.matches){\r\n            ShowGameDescription();\r\n        }\r\n        else{\r\n            ShowGameSideMenu();\r\n        }\r\n    });\r\n    \r\n    function GetClassName() : string {\r\n        let className : string = \"gamesItem \" + id + \" \";\r\n        \r\n        if(shadow){\r\n            className += shadow + \"Shadow\";\r\n        }\r\n        \r\n        return className;\r\n    }\r\n    \r\n    function ShowGameDescription() : void {\r\n        if(gameDescriptionRef.current){\r\n            gameDescriptionRef.current.style.display = \"flex\";\r\n        }\r\n        \r\n        if(gameSideMenuRef.current){\r\n            gameSideMenuRef.current.style.display = \"none\";\r\n        }\r\n    }\r\n    \r\n    function ShowGameSideMenu() : void {\r\n        if(gameSideMenuRef.current){\r\n            gameSideMenuRef.current.style.display = \"flex\";\r\n        }\r\n\r\n        if(gameDescriptionRef.current){\r\n            gameDescriptionRef.current.style.display = \"none\";\r\n        }\r\n    }\r\n\r\n    const gameImageRef: RefObject<HTMLImageElement> = useRef<HTMLImageElement>(null);\r\n    \r\n    function HandleStart() : void {\r\n        if (gameImageRef.current) {\r\n            gameImageRef.current.style.display = \"none\";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={GetClassName()}>\r\n            <div className=\"mediaContainer\">\r\n                <img ref={gameImageRef} src={imageUrl} alt=\"game image\" />\r\n                {/*<GameVideo videoUrl={videoUrl} onStart={HandleStart} />*/}\r\n            </div>\r\n            <div ref={gameDescriptionRef} id=\"gameDescription\" className={side}>\r\n                <GameDescription name={title}\r\n                                 synopses={synopses}\r\n                                 description={description}\r\n                                 store={store}\r\n                                 url={url}\r\n                                 onCloseButtonClick={ShowGameSideMenu}/>\r\n            </div>\r\n            <div ref={gameSideMenuRef} id=\"gameSideMenu\" className={side}>\r\n                <GameSideMenu title={title} onInfoClick={ShowGameDescription} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameItem;","import { resolveElements } from '../utils/resolve-element.mjs';\n\nconst thresholds = {\n    some: 0,\n    all: 1,\n};\nfunction inView(elementOrSelector, onStart, { root, margin: rootMargin, amount = \"some\" } = {}) {\n    const elements = resolveElements(elementOrSelector);\n    const activeIntersections = new WeakMap();\n    const onIntersectionChange = (entries) => {\n        entries.forEach((entry) => {\n            const onEnd = activeIntersections.get(entry.target);\n            /**\n             * If there's no change to the intersection, we don't need to\n             * do anything here.\n             */\n            if (entry.isIntersecting === Boolean(onEnd))\n                return;\n            if (entry.isIntersecting) {\n                const newOnEnd = onStart(entry);\n                if (typeof newOnEnd === \"function\") {\n                    activeIntersections.set(entry.target, newOnEnd);\n                }\n                else {\n                    observer.unobserve(entry.target);\n                }\n            }\n            else if (onEnd) {\n                onEnd(entry);\n                activeIntersections.delete(entry.target);\n            }\n        });\n    };\n    const observer = new IntersectionObserver(onIntersectionChange, {\n        root,\n        rootMargin,\n        threshold: typeof amount === \"number\" ? amount : thresholds[amount],\n    });\n    elements.forEach((element) => observer.observe(element));\n    return () => observer.disconnect();\n}\n\nexport { inView };\n","import { invariant } from '../../../utils/errors.mjs';\n\nfunction resolveElements(elements, scope, selectorCache) {\n    var _a;\n    if (typeof elements === \"string\") {\n        let root = document;\n        if (scope) {\n            invariant(Boolean(scope.current), \"Scope provided, but no element detected.\");\n            root = scope.current;\n        }\n        if (selectorCache) {\n            (_a = selectorCache[elements]) !== null && _a !== void 0 ? _a : (selectorCache[elements] = root.querySelectorAll(elements));\n            elements = selectorCache[elements];\n        }\n        else {\n            elements = root.querySelectorAll(elements);\n        }\n    }\n    else if (elements instanceof Element) {\n        elements = [elements];\n    }\n    /**\n     * Return an empty array\n     */\n    return Array.from(elements || []);\n}\n\nexport { resolveElements };\n","import { invariant } from '../../utils/errors.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { animateVisualElement } from '../interfaces/visual-element.mjs';\n\nfunction stopAnimation(visualElement) {\n    visualElement.values.forEach((value) => value.stop());\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [...variantLabels].reverse();\n    reversedLabels.forEach((key) => {\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        if (visualElement.variantChildren) {\n            visualElement.variantChildren.forEach((child) => {\n                setVariants(child, variantLabels);\n            });\n        }\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    }\n    else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [definition]);\n    }\n    else {\n        setTarget(visualElement, definition);\n    }\n}\n/**\n * @public\n */\nfunction animationControls() {\n    /**\n     * Track whether the host component has mounted.\n     */\n    let hasMounted = false;\n    /**\n     * A collection of linked component animation controls.\n     */\n    const subscribers = new Set();\n    const controls = {\n        subscribe(visualElement) {\n            subscribers.add(visualElement);\n            return () => void subscribers.delete(visualElement);\n        },\n        start(definition, transitionOverride) {\n            invariant(hasMounted, \"controls.start() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            const animations = [];\n            subscribers.forEach((visualElement) => {\n                animations.push(animateVisualElement(visualElement, definition, {\n                    transitionOverride,\n                }));\n            });\n            return Promise.all(animations);\n        },\n        set(definition) {\n            invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            return subscribers.forEach((visualElement) => {\n                setValues(visualElement, definition);\n            });\n        },\n        stop() {\n            subscribers.forEach((visualElement) => {\n                stopAnimation(visualElement);\n            });\n        },\n        mount() {\n            hasMounted = true;\n            return () => {\n                hasMounted = false;\n                controls.stop();\n            };\n        },\n    };\n    return controls;\n}\n\nexport { animationControls, setValues };\n","import { animationControls } from './animation-controls.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n\n/**\n * Creates `AnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `AnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */\nfunction useAnimationControls() {\n    const controls = useConstant(animationControls);\n    useIsomorphicLayoutEffect(controls.mount, []);\n    return controls;\n}\nconst useAnimation = useAnimationControls;\n\nexport { useAnimation, useAnimationControls };\n","import {motion, useInView, useAnimation, AnimationControls} from \"framer-motion\";\r\nimport React, { useEffect, useRef } from \"react\";\r\n\r\ninterface Props {\r\n    children: JSX.Element;\r\n    delay?: number;\r\n}\r\n\r\nexport const Reveal = ({ children, delay }: Props ) => {\r\n    const ref : React.MutableRefObject<null> = useRef(null);\r\n    const isInView : boolean = useInView(ref, { once: true });\r\n\r\n    const mainControls : AnimationControls = useAnimation();\r\n\r\n    useEffect(() : void => {\r\n        if (isInView) {\r\n            mainControls.start(\"visible\");\r\n        }\r\n    }, [isInView])\r\n\r\n    return (\r\n        <motion.div\r\n            ref={ref}\r\n            variants={{\r\n                hidden: { opacity: 0, y: 75 },\r\n                visible: { opacity: 1, y: 0 },\r\n            }}\r\n            initial=\"hidden\"\r\n            animate={mainControls}\r\n            transition={{ duration: 0.7, delay: delay }}>\r\n            {children}\r\n        </motion.div>\r\n    )\r\n}","import { useState, useEffect } from 'react';\nimport { inView } from '../render/dom/viewport/index.mjs';\n\nfunction useInView(ref, { root, margin, amount, once = false } = {}) {\n    const [isInView, setInView] = useState(false);\n    useEffect(() => {\n        if (!ref.current || (once && isInView))\n            return;\n        const onEnter = () => {\n            setInView(true);\n            return once ? undefined : () => setInView(false);\n        };\n        const options = {\n            root: (root && root.current) || undefined,\n            margin,\n            amount,\n        };\n        return inView(ref.current, onEnter, options);\n    }, [root, ref, margin, once, amount]);\n    return isInView;\n}\n\nexport { useInView };\n"],"names":["GameButtonDisabled","t","i18n","useTranslation","_jsx","className","children","type","disabled","_ref","store","url","GetStoreImgClass","GetStoreImage","itchImage","steamImage","href","target","rel","src","alt","name","synopses","description","onCloseButtonClick","Reveal","_jsxs","GameButton","onClick","title","onInfoClick","id","videoUrl","imageUrl","side","shadow","gameDescriptionRef","useRef","gameSideMenuRef","mediaQueryList","window","matchMedia","ShowGameDescription","current","style","display","ShowGameSideMenu","addEventListener","matches","gameImageRef","GetClassName","ref","GameDescription","GameSideMenu","thresholds","some","all","inView","elementOrSelector","onStart","root","margin","rootMargin","amount","arguments","length","undefined","elements","scope","selectorCache","_a","document","invariant","Boolean","querySelectorAll","Element","Array","from","resolveElements","activeIntersections","WeakMap","observer","IntersectionObserver","entries","forEach","entry","onEnd","get","isIntersecting","newOnEnd","set","unobserve","delete","threshold","element","observe","disconnect","setVariants","visualElement","variantLabels","reverse","key","variant","getVariant","setTarget","variantChildren","child","animationControls","hasMounted","subscribers","Set","controls","subscribe","add","start","definition","transitionOverride","animations","push","animateVisualElement","Promise","isArray","setValues","stop","values","value","stopAnimation","mount","useAnimation","useConstant","useIsomorphicLayoutEffect","delay","isInView","once","setInView","useState","useEffect","options","onEnter","useInView","mainControls","motion","div","variants","hidden","opacity","y","visible","initial","animate","transition","duration"],"sourceRoot":""}